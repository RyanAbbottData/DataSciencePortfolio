predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds = sprintf("%.3f", c(predictions)), pct = mvp_odds / sum(mvp_odds))
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds = c(predictions), pct = mvp_odds / sum(mvp_odds))
arrange(current_season_df, desc(mvp_odds))
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds =  c(predictions), pct = mvp_odds / sum(mvp_odds))
arrange(current_season_df, desc(mvp_odds))
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds =  c(predictions), pct = sprinf("%3f", mvp_odds / sum(mvp_odds))
arrange(current_season_df, desc(mvp_odds))
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds =  c(predictions), pct = sprinf("%3f", mvp_odds / sum(mvp_odds)))
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds =  c(predictions), pct = sprintf("%3f", mvp_odds / sum(mvp_odds)))
arrange(current_season_df, desc(mvp_odds))
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds =  c(predictions), pct = sprintf("%3f", mvp_odds / sum(mvp_odds)))
arrange(current_season_df, desc(mvp_odds))
# Run this befor every session
Sys.setenv("VROOM_CONNECTION_SIZE" = 262144)
library("nbastatR")
library("dplyr")
library("tidyverse")
library("gt")
library("webshot2")
library("ggplot2")
#Plots and creating categorical labels
data <- read_csv("MVP_Model_Training_data.csv")
#data_names <- data %>% select(year, names)
data <- data %>% replace_na(list(mvp=0))
data <- mutate(data, is_mvp = case_when(mvp == 0 ~ "NO",
mvp == 1 ~ "YES"))
#arrange(setdiff(data_names, data_rosters), names)
#999999999999999999999999999999999;data <- mutate(data, team = )
#df_rosters <- seasons_rosters(2013:2022)
#data$team <- data_rosters
#data
#data_rosters <- arrange(data_rosters, namePlayer)
#data <- arrange(data, names)
#data <- mutate(data, team = )
#data_rosters
#data$team = data_rosters$slugTeam
#filter(data, names == (c(arrange(setdiff(data_names, data_rosters), names))))
#c(setdiff(data$names, data_rosters$namePlayer))
#data[which(!(data_rosters$namePlayer %in% data$names))]
#write.csv(df_rosters, "Team_Rosters_2013_2022.csv", row.names = FALSE)
ggplot(data, aes(x=is_mvp, y=win_pct, fill=is_mvp)) + geom_boxplot() + guides(color = guide_legend(title = "Is MVP")) + xlab("Is MVP") + ylab("Win Percentage") + ggtitle("Distribution of Win Percentages in Games Played, non MVPs and MVPs") + labs(fill="Is MVP")
ggsave("winpct_boxplot.png")
ggplot(data, aes(x=is_mvp, y=pts, fill=is_mvp)) + geom_boxplot() + guides(color = guide_legend(title = "Is MVP")) + xlab("Is MVP") + ylab("Points Per Game") + ggtitle("Distribution of Points Per Game Scored, non MVPs and MVPs") + labs(fill="Is MVP")
ggplot(data, aes(x=pts,y=ast,color=is_mvp,label=names)) + geom_point() +  geom_text(aes(label=ifelse(mvp==1,as.character(names),'')),hjust=0,vjust=0, size=2) + guides(color = guide_legend(title = "Is MVP")) + ggtitle("Points Per Game Scored Compared to Assists Per Game") + ylab("Assists Per Game") + xlab("Points Per Game")
ggplot(data, aes(x=pts,y=reb,color=is_mvp,label=names)) + geom_point() +  geom_text(aes(label=ifelse(mvp==1,as.character(names),'')),hjust=0,vjust=0, size=2) + guides(color = guide_legend(title = "Is MVP")) + ggtitle("Points Per Game Scored Compared to Rebounds Per Game") + ylab("Rebounds Per Game") + xlab("Points Per Game")
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds =  c(predictions), pct = sprintf("%3f", mvp_odds / sum(mvp_odds)))
arrange(current_season_df, desc(mvp_odds))
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds =  c(predictions), pct = sprintf("%3f", mvp_odds / sum(mvp_odds)))
arrange(current_season_df, desc(mvp_odds))
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds =  c(predictions), pct = sprintf("%3f", mvp_odds / sum(mvp_odds)))
arrange(current_season_df, desc(mvp_odds))
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds =  c(predictions), pct = sprintf("%3f", mvp_odds / sum(mvp_odds)))
arrange(current_season_df, desc(mvp_odds))
Sys.setenv("VROOM_CONNECTION_SIZE" = 262144)
gamedata <- game_logs(seasons = 2013:2022)
# Run this befor every session
Sys.setenv("VROOM_CONNECTION_SIZE" = 262144)
library("nbastatR")
library("dplyr")
library("tidyverse")
library("gt")
library("webshot2")
library("ggplot2")
#Plots and creating categorical labels
data <- read_csv("MVP_Model_Training_data.csv")
#data_names <- data %>% select(year, names)
data <- data %>% replace_na(list(mvp=0))
data <- mutate(data, is_mvp = case_when(mvp == 0 ~ "NO",
mvp == 1 ~ "YES"))
#arrange(setdiff(data_names, data_rosters), names)
#999999999999999999999999999999999;data <- mutate(data, team = )
#df_rosters <- seasons_rosters(2013:2022)
#data$team <- data_rosters
#data
#data_rosters <- arrange(data_rosters, namePlayer)
#data <- arrange(data, names)
#data <- mutate(data, team = )
#data_rosters
#data$team = data_rosters$slugTeam
#filter(data, names == (c(arrange(setdiff(data_names, data_rosters), names))))
#c(setdiff(data$names, data_rosters$namePlayer))
#data[which(!(data_rosters$namePlayer %in% data$names))]
#write.csv(df_rosters, "Team_Rosters_2013_2022.csv", row.names = FALSE)
ggplot(data, aes(x=is_mvp, y=win_pct, fill=is_mvp)) + geom_boxplot() + guides(color = guide_legend(title = "Is MVP")) + xlab("Is MVP") + ylab("Win Percentage") + ggtitle("Distribution of Win Percentages in Games Played, non MVPs and MVPs") + labs(fill="Is MVP")
ggsave("winpct_boxplot.png")
ggplot(data, aes(x=is_mvp, y=pts, fill=is_mvp)) + geom_boxplot() + guides(color = guide_legend(title = "Is MVP")) + xlab("Is MVP") + ylab("Points Per Game") + ggtitle("Distribution of Points Per Game Scored, non MVPs and MVPs") + labs(fill="Is MVP")
ggplot(data, aes(x=pts,y=ast,color=is_mvp,label=names)) + geom_point() +  geom_text(aes(label=ifelse(mvp==1,as.character(names),'')),hjust=0,vjust=0, size=2) + guides(color = guide_legend(title = "Is MVP")) + ggtitle("Points Per Game Scored Compared to Assists Per Game") + ylab("Assists Per Game") + xlab("Points Per Game")
ggplot(data, aes(x=pts,y=reb,color=is_mvp,label=names)) + geom_point() +  geom_text(aes(label=ifelse(mvp==1,as.character(names),'')),hjust=0,vjust=0, size=2) + guides(color = guide_legend(title = "Is MVP")) + ggtitle("Points Per Game Scored Compared to Rebounds Per Game") + ylab("Rebounds Per Game") + xlab("Points Per Game")
#Building Model
#Creating Training and Testing Data
current_data <- game_logs(seasons = 2023)
current_data <- mutate(current_data, isWin = case_when(outcomeGame == "W" ~ 1,
outcomeGame == "L" ~ 0), isGame = 1)
#teams_rosters(seasons = 2013:2022, nest_data = F, return_message = T)
#dictionary_bref_players(
wins <- aggregate(current_data$isWin, list(current_data$namePlayer), sum)
total_games <- aggregate(current_data$isGame, list(current_data$namePlayer), sum)
pts <- aggregate(current_data$pts, list(current_data$namePlayer), mean)
ast <- aggregate(current_data$ast, list(current_data$namePlayer), mean)
reb <- aggregate(current_data$treb, list(current_data$namePlayer), mean)
current_season_df <- tibble(
names = pts$Group.1,
pts = pts$x,
ast = ast$x,
reb = reb$x,
wins = wins$x,
total_games = total_games$x,
win_pct = wins/total_games,
year = 2023
)
current_season_df
ggplot(current_season_df, aes(x=pts,y=ast)) + geom_point()
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[sample, ]
test <- data[!sample, ]
logistic_model <- glm(mvp ~ pts + ast + reb + win_pct,
data = train,
family = "binomial")
summary(logistic_model)
test_row <- tribble(
~pts, ~ast, ~reb,
35, 7, 8
)
predictions <- predict(logistic_model,
current_season_df,
type = "response")
current_season_df <- mutate(current_season_df, mvp_odds =  c(predictions), pct = sprintf("%3f", mvp_odds / sum(mvp_odds)))
arrange(current_season_df, desc(mvp_odds))
git config user.name RyanAbbottData
